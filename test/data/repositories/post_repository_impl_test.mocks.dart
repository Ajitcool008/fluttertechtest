// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_tech_task/test/data/repositories/post_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_tech_task/core/network/network_info.dart' as _i7;
import 'package:flutter_tech_task/data/datasources/post_local_data_source.dart'
    as _i6;
import 'package:flutter_tech_task/data/datasources/post_remote_data_source.dart'
    as _i3;
import 'package:flutter_tech_task/data/models/comment_model.dart' as _i5;
import 'package:flutter_tech_task/data/models/post_model.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostModel_0 extends _i1.SmartFake implements _i2.PostModel {
  _FakePostModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PostRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostRemoteDataSource extends _i1.Mock
    implements _i3.PostRemoteDataSource {
  MockPostRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.PostModel>> getAllPosts() => (super.noSuchMethod(
        Invocation.method(
          #getAllPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i2.PostModel>>.value(<_i2.PostModel>[]),
      ) as _i4.Future<List<_i2.PostModel>>);

  @override
  _i4.Future<_i2.PostModel> getPostDetails(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getPostDetails,
          [id],
        ),
        returnValue: _i4.Future<_i2.PostModel>.value(_FakePostModel_0(
          this,
          Invocation.method(
            #getPostDetails,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.PostModel>);

  @override
  _i4.Future<List<_i5.CommentModel>> getPostComments(int? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPostComments,
          [postId],
        ),
        returnValue:
            _i4.Future<List<_i5.CommentModel>>.value(<_i5.CommentModel>[]),
      ) as _i4.Future<List<_i5.CommentModel>>);
}

/// A class which mocks [PostLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostLocalDataSource extends _i1.Mock
    implements _i6.PostLocalDataSource {
  MockPostLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.PostModel>> getSavedPosts() => (super.noSuchMethod(
        Invocation.method(
          #getSavedPosts,
          [],
        ),
        returnValue: _i4.Future<List<_i2.PostModel>>.value(<_i2.PostModel>[]),
      ) as _i4.Future<List<_i2.PostModel>>);

  @override
  _i4.Future<_i2.PostModel> savePost(_i2.PostModel? post) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePost,
          [post],
        ),
        returnValue: _i4.Future<_i2.PostModel>.value(_FakePostModel_0(
          this,
          Invocation.method(
            #savePost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.PostModel>);

  @override
  _i4.Future<_i2.PostModel> unsavePost(_i2.PostModel? post) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsavePost,
          [post],
        ),
        returnValue: _i4.Future<_i2.PostModel>.value(_FakePostModel_0(
          this,
          Invocation.method(
            #unsavePost,
            [post],
          ),
        )),
      ) as _i4.Future<_i2.PostModel>);

  @override
  _i4.Future<bool> isPostSaved(int? postId) => (super.noSuchMethod(
        Invocation.method(
          #isPostSaved,
          [postId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<int> getSavedPostsCount() => (super.noSuchMethod(
        Invocation.method(
          #getSavedPostsCount,
          [],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.CommentModel>> getSavedPostComments(int? postId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSavedPostComments,
          [postId],
        ),
        returnValue:
            _i4.Future<List<_i5.CommentModel>>.value(<_i5.CommentModel>[]),
      ) as _i4.Future<List<_i5.CommentModel>>);

  @override
  _i4.Future<void> savePostComments(
    int? postId,
    List<_i5.CommentModel>? comments,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePostComments,
          [
            postId,
            comments,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> hasCommentsForPost(int? postId) => (super.noSuchMethod(
        Invocation.method(
          #hasCommentsForPost,
          [postId],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
